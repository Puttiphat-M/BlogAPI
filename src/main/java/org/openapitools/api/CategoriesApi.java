/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Category;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-07-10T10:33:08.205777+07:00[Asia/Bangkok]")
@Validated
@Tag(name = "categories", description = "the categories API")
public interface CategoriesApi {

    default CategoriesApiDelegate getDelegate() {
        return new CategoriesApiDelegate() {};
    }

    /**
     * GET /categories : Return all categories
     *
     * @return A list of categories (status code 200)
     */
    @Operation(
            operationId = "categoriesGet",
            summary = "Return all categories",
            responses = {
                    @ApiResponse(responseCode = "200", description = "A list of categories", content = {
                            @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Category.class)))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/categories",
            produces = { "application/json" }
    )
    default ResponseEntity<List<Category>> categoriesGet(

    ) {
        return getDelegate().categoriesGet();
    }


    /**
     * DELETE /categories/{title} : Delete a specific category by its title
     *
     * @param title title of the category (required)
     * @return Category deleted successfully (status code 200)
     *         or Invalid request (status code 400)
     */
    @Operation(
            operationId = "categoriesTitleDelete",
            summary = "Delete a specific category by its title",
            responses = {
                    @ApiResponse(responseCode = "200", description = "Category deleted successfully"),
                    @ApiResponse(responseCode = "400", description = "Invalid request")
            }
    )
    @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/categories/{title}"
    )
    default ResponseEntity<Void> categoriesTitleDelete(
            @Parameter(name = "title", description = "title of the category", required = true, in = ParameterIn.PATH) @PathVariable("title") String title
    ) {
        return getDelegate().categoriesTitleDelete(title);
    }


    /**
     * GET /categories/{title} : Retrieve a specific category (Search by key of title)
     *
     * @param title title of the category (required)
     * @return Category return successfully (status code 200)
     * or Category not found (status code 404)
     */
    @Operation(
            operationId = "categoriesTitleGet",
            summary = "Retrieve a specific category (Search by key of title)",
            responses = {
                    @ApiResponse(responseCode = "200", description = "Category return successfully", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Category.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Category not found")
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/categories/{title}",
            produces = { "application/json" }
    )
    default ResponseEntity<? extends List<Category>> categoriesTitleGet(
            @Parameter(name = "title", description = "title of the category", required = true, in = ParameterIn.PATH) @PathVariable("title") String title
    ) {
        return getDelegate().categoriesTitleGet(title);
    }


    /**
     * POST /categories/{title} : Create a new category with a custom key
     *
     * @param title title of the category (required)
     * @return Category created successfully (status code 201)
     *         or Invalid request payload (status code 400)
     */
    @Operation(
            operationId = "categoriesTitlePost",
            summary = "Create a new category with a custom key",
            responses = {
                    @ApiResponse(responseCode = "201", description = "Category created successfully", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Category.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Invalid request payload")
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/categories/{title}",
            produces = { "application/json" }
    )
    default ResponseEntity<Category> categoriesTitlePost(
            @Parameter(name = "title", description = "title of the category", required = true, in = ParameterIn.PATH) @PathVariable("title") String title
    ) {
        return getDelegate().categoriesTitlePost(title);
    }

}
