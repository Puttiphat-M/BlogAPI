/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Blog;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-07-11T02:47:03.635223+07:00[Asia/Bangkok]")
@Validated
@Tag(name = "blogs", description = "the blogs API")
public interface BlogsApi {

    default BlogsApiDelegate getDelegate() {
        return new BlogsApiDelegate() {};
    }

    /**
     * GET /blogs : Return a list of blogs for the carousel(all)
     *
     * @return A list of blogs (status code 200)
     */
    @Operation(
        operationId = "blogsGet",
        summary = "Return a list of blogs for the carousel(all)",
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of blogs", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Blog.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blogs",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Blog>> blogsGet(
        
    ) {
        return getDelegate().blogsGet();
    }


    /**
     * DELETE /blogs/{title} : Delete a specific blog by its ID
     *
     * @param title title of the blog (required)
     * @return Blog deleted successfully (status code 200)
     *         or Invalid request (status code 400)
     */
    @Operation(
        operationId = "blogsTitleDelete",
        summary = "Delete a specific blog by its ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "Blog deleted successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid request")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/blogs/{title}"
    )
    default ResponseEntity<Void> blogsTitleDelete(
        @Parameter(name = "title", description = "title of the blog", required = true, in = ParameterIn.PATH) @PathVariable("title") String title
    ) {
        return getDelegate().blogsTitleDelete(title);
    }


    /**
     * GET /blogs/{title} : Return a specific blog by its ID
     *
     * @param title title of the blog (required)
     * @return Blog retrieved successfully (status code 200)
     *         or Blog not found (status code 404)
     */
    @Operation(
        operationId = "blogsTitleGet",
        summary = "Return a specific blog by its ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "Blog retrieved successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Blog.class))
            }),
            @ApiResponse(responseCode = "404", description = "Blog not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blogs/{title}",
        produces = { "application/json" }
    )
    default ResponseEntity<Blog> blogsTitleGet(
        @Parameter(name = "title", description = "title of the blog", required = true, in = ParameterIn.PATH) @PathVariable("title") String title
    ) {
        return getDelegate().blogsTitleGet(title);
    }


    /**
     * PUT /blogs/{title} : Update a specific blog by its ID
     *
     * @param title title of the blog (required)
     * @param blog  (required)
     * @return Blog updated successfully (status code 200)
     *         or Invalid request payload (status code 400)
     */
    @Operation(
        operationId = "blogsTitlePut",
        summary = "Update a specific blog by its ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "Blog updated successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid request payload")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/blogs/{title}",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> blogsTitlePut(
        @Parameter(name = "title", description = "title of the blog", required = true, in = ParameterIn.PATH) @PathVariable("title") String title,
        @Parameter(name = "Blog", description = "", required = true) @Valid @RequestBody Blog blog
    ) {
        return getDelegate().blogsTitlePut(title, blog);
    }

}
