/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.ViewData;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-07-11T02:47:03.635223+07:00[Asia/Bangkok]")
@Validated
@Tag(name = "view", description = "the view API")
public interface ViewApi {

    default ViewApiDelegate getDelegate() {
        ViewApiDelegate viewApiDelegate = new ViewApiDelegate() {
            @Override
            public ResponseEntity<ViewData> viewViewdataPost(String title, Integer day, String SelectedMonth, Integer year, Integer hour, Integer minute, String description, List<String> selectedCategories, String selectedStatus) {
                return null;
            }
        };
        return viewApiDelegate;
    }

    /**
     * GET /view : Return all create view data
     *
     * @return A list of create view data (status code 200)
     */
    @Operation(
        operationId = "viewGet",
        summary = "Return all create view data",
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of create view data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ViewData.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/view",
        produces = { "application/json" }
    )
    default ResponseEntity<List<ViewData>> viewGet(
        
    ) {
        return getDelegate().viewGet();
    }


    /**
     * GET /view/{id}/{categories}/{date}
     *
     * @param id         id of the blog (required)
     * @param categories categories of the blog (required)
     * @param date       date of the blog (required)
     * @return Recent view data retrieved successfully (status code 200)
     */
    @Operation(
        operationId = "viewIdCategoriesDateGet",
        responses = {
            @ApiResponse(responseCode = "200", description = "Recent view data retrieved successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ViewData.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/view/{id}/{categories}/{date}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<ViewData>> viewIdCategoriesDateGet(
            @RequestParam(required = false) String id,
            @RequestParam(required = false) String categories,
            @RequestParam(required = false) String date)
    {
        return getDelegate().viewIdCategoriesDateGet(id, categories, date);
    }


    /**
     * DELETE /view/{id} : Delete a specific blog by its ID
     *
     * @param id ID of the recent view data (required)
     * @return Recent view data deleted successfully (status code 200)
     *         or Invalid request payload (status code 400)
     */
    @Operation(
        operationId = "viewIdDelete",
        summary = "Delete a specific blog by its ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "Recent view data deleted successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid request payload")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/view/{id}"
    )
    default ResponseEntity<Void> viewIdDelete(
        @Parameter(name = "id", description = "ID of the recent view data", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return getDelegate().viewIdDelete(id);
    }


    /**
     * PUT /view/{id} : Update the edit view data
     *
     * @param id       ID of the blog (required)
     * @param title    Title of the blog (required)
     * @param description Description of the blog (required)
     * @param day Day of the blog (required)
     * @param month Month of the blog (required)
     * @param year Year of the blog (required)
     * @param hour Hour of the blog (required)
     * @param minute Minute of the blog (required)
     * @param selectedCategories Selected categories of the blog (required)
     * @param selectedStatus Selected status of the blog (required)
     *
     * @return Edit view data updated successfully (status code 200)
     * or Invalid request payload (status code 400)
     */
    @Operation(
        operationId = "viewIdPut",
        summary = "Update the edit view data",
        responses = {
            @ApiResponse(responseCode = "200", description = "Edit view data updated successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid request payload")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/view/{id}",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> viewIdPut(
            @Parameter(name = "id", description = "ID of the blog you want to edit", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
            @Parameter(name = "title", description = "Title of the blog", required = true) @Valid @RequestParam("title") String title,
            @Parameter(name = "description", description = "Description of the blog", required = true) @Valid @RequestParam("description") String description,
            @Parameter(name = "day", description = "Day of the blog", required = true) @Valid @RequestParam("day") Integer day,
            @Parameter(name = "year", description = "Year of the blog", required = true) @Valid @RequestParam("year") Integer year,
            @Parameter(name = "hour", description = "Hour of the blog", required = true) @Valid @RequestParam("hour") Integer hour,
            @Parameter(name = "minute", description = "Minute of the blog", required = true) @Valid @RequestParam("minute") Integer minute,
            @Parameter(name = "selectedMonth", description = "Selected month of the blog", required = true) @Valid @RequestParam String selectedMonth,
            @Parameter(name = "selectedCategories", description = "Selected categories of the blog", required = true) @Valid @RequestParam("selectedCategories") List<String> selectedCategories,
            @Parameter(name = "selectedStatus", description = "Selected status of the blog", required = true) @Valid @RequestParam("selectedStatus") String selectedStatus    )
    {
            return getDelegate().viewIdPut(
                id,
                title,
                day,
                selectedMonth,
                year,
                hour,
                minute,
                description,
                selectedCategories,
                selectedStatus);
    }


    /**
     * POST /view/{viewdata} : Create a new blog
     *
     * @param title  (required)
     * @param day  (required)
     * @param selectedMonth  (required)
     * @param year  (required)
     * @param hour  (required)
     * @param minute  (required)
     * @param description  (required)
     * @param selectedCategories  (required)
     * @param selectedStatus  (required)
     * @return Blog created successfully (status code 200)
     *         or Invalid request payload (status code 400)
     */
    @Operation(
        operationId = "viewViewdataPost",
        summary = "Create a new blog",
        responses = {
            @ApiResponse(responseCode = "200", description = "Blog created successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid request payload")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/view/{viewdata}"
    )

    default ResponseEntity<ViewData> viewViewdataPost(
            @NotNull @Parameter(name = "title", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "title", required = true) String title,
            @NotNull @Parameter(name = "day", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "day", required = true) Integer day,
            @NotNull @Parameter(name = "selectedMonth", description = "", required = true, in = ParameterIn.QUERY) @Valid String selectedMonth,
            @NotNull @Parameter(name = "minute", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "minute", required = true) Integer minute,
            @NotNull @Parameter(name = "description", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "description", required = true) String description,
            @NotNull @Parameter(name = "selectedCategories", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "selectedCategories", required = true) List<String> selectedCategories,
            @NotNull @Parameter(name = "selectedStatus", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "selectedStatus", required = true) String selectedStatus,
            @NotNull @Parameter(name = "year", description = "",  required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "year", required = false) Integer year,
            @NotNull @Parameter(name = "hour", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "hour", required = false) Integer hour
    ) {
        return getDelegate().viewViewdataPost(title, day, selectedMonth, year, hour, minute, description, selectedCategories, selectedStatus);
    }

}
